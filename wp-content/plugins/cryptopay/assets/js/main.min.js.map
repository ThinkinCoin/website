{"version":3,"sources":["main.js"],"names":["$","handleUnloadEvent","navigator","userAgent","indexOf","document","documentMode","e","preventDefault","printError","errorMessage","scrollElement","remove","$form","prepend","removeClass","unblock","find","trigger","length","animate","scrollTop","offset","top","body","checkFormProcess","network","window","cpHelpers","waitingPopup","CryptoPay","lang","checkingForm","Promise","ajax","type","url","wc_checkout_params","checkout_url","data","serialize","dataType","success","response","off","resolve","reload","location","refresh","message","defaultErrorMsg","paymentType","error","qrCodePaymentMsg","jqXHR","textStatus","errorThrown","await","providers","let","forEach","provider","index","key","toLowerCase","replace","startPayment","order","params","amount","Error","currency","CryptoPayApp","initCryptoPay","Object","assign","autoLoad","checkoutPage","hooks","beforeThanPayNow","beforeThanQrPaymentConfirmation","on","selectedNetwork","store","getters","getSelectedNetwork","qrVerifierInterval","clearInterval","reset","jQuery"],"mappings":"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","file":"main.min.js","sourcesContent":["(async($) => {\r\n\r\n    await new Promise((resolve) => {\r\n        if (CryptoPay.providers.length > 0) {\r\n            let providers = CryptoPay.providers;\r\n            CryptoPay.providers = {}\r\n            providers.forEach(function (provider, index) {\r\n                let key = provider.toLowerCase();\r\n                key = key.replace('evmchains', 'evmBased');\r\n                CryptoPay.providers[key] = window[provider];\r\n                if (index === providers.length - 1) resolve(CryptoPay.providers);\r\n            });\r\n        } else {\r\n            resolve(CryptoPay.providers = {});\r\n        }\r\n    });\r\n\r\n    CryptoPay.startPayment = (order, params) => {\r\n        if (!order.amount) {\r\n            throw new Error('Order amount is required');\r\n        }\r\n\r\n        if (!order.currency) {\r\n            throw new Error('Order currency is required');\r\n        }\r\n\r\n        return window.CryptoPayApp = initCryptoPay('cryptopay', Object.assign(CryptoPay, {order, params}));\r\n    }\r\n\r\n    if (CryptoPay.autoLoad) {\r\n        window.CryptoPayApp = initCryptoPay('cryptopay', CryptoPay);\r\n    }\r\n\r\n    if (CryptoPay.checkoutPage) {\r\n\r\n        $form = $('form.checkout');\r\n\r\n        function handleUnloadEvent() {\r\n            if((navigator.userAgent.indexOf('MSIE') !== -1 ) || (!!document.documentMode)) {\r\n                // IE handles unload events differently than modern browsers\r\n                e.preventDefault();\r\n                return undefined;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function scrollToNotices() {\r\n            var scrollElement = $('.woocommerce-NoticeGroup-updateOrderReview, .woocommerce-NoticeGroup-checkout');\r\n    \r\n            if ( ! scrollElement.length ) {\r\n                scrollElement = $form;\r\n            }\r\n            \r\n            if ( scrollElement.length ) {\r\n                $( 'html, body' ).animate( {\r\n                    scrollTop: ( scrollElement.offset().top - 100 )\r\n                }, 1000 );\r\n            }\r\n        }\r\n\r\n        function printError(errorMessage) {\r\n\t\t\t$('.woocommerce-NoticeGroup-checkout, .woocommerce-error, .woocommerce-message').remove();\r\n\t\t\t$form.prepend('<div class=\"woocommerce-NoticeGroup woocommerce-NoticeGroup-checkout\">' + errorMessage + '</div>');\r\n\t\t\t$form.removeClass('processing').unblock();\r\n\t\t\t$form.find('.input-text, select, input:checkbox').trigger('validate').trigger('blur');\r\n\t\t\tscrollToNotices();\r\n\t\t\t$(document.body).trigger('checkout_error' , [errorMessage]);\r\n\t\t}\r\n\r\n        function checkFormProcess(network) {\r\n            window.cpHelpers.waitingPopup(CryptoPay.lang.checkingForm);\r\n            return new Promise((resolve) => {\r\n                $.ajax({\r\n\t\t\t\t\ttype:\t\t'POST',\r\n\t\t\t\t\turl:\t\twc_checkout_params.checkout_url,\r\n\t\t\t\t\tdata:\t\t$form.serialize(),\r\n\t\t\t\t\tdataType:   'json',\r\n\t\t\t\t\tsuccess:\tfunction(response) {\r\n                        $(window).off('beforeunload', handleUnloadEvent);\r\n\r\n                        if (response.success) {\r\n                            $(\".woocommerce-NoticeGroup-checkout\").remove();\r\n                            resolve(null);\r\n                        } else {\r\n                            if (true === response.data.reload) {\r\n\t\t\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (true === response.data.refresh) {\r\n\t\t\t\t\t\t\t\t$(document.body).trigger('update_checkout');\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (response.message) {\r\n\t\t\t\t\t\t\t\tprintError(response.message);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tprintError('<div class=\"woocommerce-error\">' + CryptoPay.lang.defaultErrorMsg + '</div>'); \r\n\t\t\t\t\t\t\t}\r\n\r\n                            if (network.paymentType === 'qr') {\r\n                                return resolve({error: true, message: CryptoPay.lang.qrCodePaymentMsg});\r\n                            }\r\n\r\n                            resolve({error: true});\r\n                        }\r\n\t\t\t\t\t},\r\n\t\t\t\t\terror:\tfunction(jqXHR, textStatus, errorThrown) {\r\n                        $(window).off('beforeunload', handleUnloadEvent);\r\n\r\n\t\t\t\t\t\tprintError(\r\n\t\t\t\t\t\t\t'<div class=\"woocommerce-error\">' +\r\n\t\t\t\t\t\t\t(errorThrown || CryptoPay.lang.defaultErrorMsg) +\r\n\t\t\t\t\t\t\t'</div>'\r\n\t\t\t\t\t\t);\r\n\r\n                        resolve({\r\n                            error: true,\r\n                        });\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n            });\r\n        }\r\n\r\n        CryptoPay.hooks.beforeThanPayNow = (network) => {\r\n            return checkFormProcess(network);\r\n        }\r\n\r\n        CryptoPay.hooks.beforeThanQrPaymentConfirmation = (network) => {\r\n            return checkFormProcess(network);\r\n        }\r\n\r\n        $(document).on('updated_checkout', function () {\r\n            if (window.CryptoPayApp) {\r\n                if (window.CryptoPayApp.store) {\r\n                    let selectedNetwork = window.CryptoPayApp.store.getters.getSelectedNetwork;\r\n                    if (\r\n                        selectedNetwork &&\r\n                        selectedNetwork.paymentType === 'qr' && \r\n                        window.qrVerifierInterval\r\n                    ) {\r\n                        clearInterval(window.qrVerifierInterval);\r\n                    }\r\n                }\r\n                window.CryptoPayApp.reset();\r\n            }\r\n            window.CryptoPayApp = initCryptoPay('cryptopay', CryptoPay);\r\n        });\r\n    \r\n        $('form.checkout').on('change', 'input[name=\"payment_method\"]', function() {\r\n            $(document.body).trigger('update_checkout');\r\n        });\r\n    }\r\n\r\n})(jQuery);"]}